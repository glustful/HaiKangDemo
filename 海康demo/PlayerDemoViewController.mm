////  PlayerDemoViewController.m//  PlayerDemo////  Created by apple on 11-4-2.//  Copyright __MyCompanyName__ 2011. All rights reserved.//#import "PlayerDemoViewController.h"#import "hcnetsdk.h"#import "HikDec.h"#import "OtherTest.h"#import "VoiceTalk.h"#import "Preview.h"#import "EzvizTrans.h"#import <Foundation/Foundation.h>#include <stdio.h>#include <ifaddrs.h>#include <sys/socket.h>#include <sys/poll.h>#include <net/if.h>#include <map>@implementation PlayerDemoViewController@synthesize	m_deviceIpField;@synthesize	m_devicePortField;@synthesize	m_uerNameField;@synthesize	m_passwordField;@synthesize m_playView;@synthesize m_playButton;@synthesize m_playbackButton;@synthesize m_loginButton;@synthesize m_getcfgButton;@synthesize m_captureButton;@synthesize m_recordButton;@synthesize m_talkButton;@synthesize m_ptzButton;@synthesize m_otherButton;@synthesize m_nPreviewPort;@synthesize m_nPlaybackPort;@synthesize m_fp;@synthesize m_playThreadID;@synthesize m_bThreadRun;@synthesize m_lUserID;@synthesize m_lRealPlayID;@synthesize m_lPlaybackID;@synthesize m_bPreview;@synthesize m_bRecord;@synthesize m_bPTZL;@synthesize m_bVoiceTalk;@synthesize m_bStopPlayback;@synthesize m_bPTZUD;@synthesize m_ptzUDButton;PlayerDemoViewController *g_pController = NULL;int g_iStartChan=0;int g_iPreviewChanNum = 0;bool g_bDecode = true;//playback callback functionvoid fPlayDataCallBack_V40(LONG lPlayHandle, DWORD dwDataType, BYTE *pBuffer,DWORD dwBufSize,void *pUser){    PlayerDemoViewController *pDemo = (__bridge PlayerDemoViewController*)pUser;    //LPHANDLE_STRUCT pHandle = (LPHANDLE_STRUCT)pUser;    	int i = 0;    switch (dwDataType)    {        case NET_DVR_SYSHEAD:                        if (dwBufSize > 0 && pDemo->m_nPlaybackPort == -1)            {                if(PlayM4_GetPort(&pDemo->m_nPlaybackPort) != 1)                {                    NSLog(@"PlayM4_GetPort failed:%d",  NET_DVR_GetLastError());                    break;                }                if (!PlayM4_SetStreamOpenMode(pDemo->m_nPlaybackPort, STREAME_FILE))                {                    break;                }                if (!PlayM4_OpenStream(pDemo->m_nPlaybackPort, pBuffer , dwBufSize, 2*1024*1024))                {                    break;                }                pDemo->m_bPreview = 0;                [pDemo startPlayer];            }            break;        default:            if (dwBufSize > 0 && pDemo->m_nPlaybackPort != -1 && !pDemo->m_bStopPlayback)            {                for(i = 0; i < 4000; i++)                {                    if(PlayM4_InputData(pDemo->m_nPlaybackPort, pBuffer, dwBufSize))                    {                        break;                    }                                                            /*                                                                                    usleep() 与sleep()类似，用于延迟挂起进程。进程被挂起放到reday queue。                     是一般情况下，延迟时间数量级是秒的时候，尽可能使用sleep()函数。                     如果延迟时间为几十毫秒（1ms = 1000us），或者更小，尽可能使用usleep()函数。这样才能最佳的利用CPU时间                                */                    //挂起线程，单位微妙相当于1秒                                        usleep(10*1000);                }            }            break;    }	}void g_fExceptionCallBack(DWORD dwType, LONG lUserID, LONG lHandle, void *pUser){    NSLog(@"g_fExceptionCallBack Type[0x%x], UserID[%d], Handle[%d]", dwType, lUserID, lHandle);}//other function button click up===========其它按钮-(void)otherBtnClicked:(id)sender{//    TEST_Manage(m_lUserID, g_iStartChan);//    TEST_PTZ(m_lRealPlayID, m_lUserID, g_iStartChan);//    TEST_Config(m_lRealPlayID, m_lUserID, g_iStartChan);    TEST_Other(m_lRealPlayID, m_lUserID, g_iStartChan, m_lPlaybackID);//    TEST_Alarm(m_lUserID);    }//ptz button click ===============更改上下方向标识- (IBAction)ptzBtnClickedUP:(id)sender{    NSLog(@"ptzBtnClickedUP");    NSLog(@"点击了上下方向标识");        if (m_lUserID < 0)    {        NSLog(@"Please logon a device first!");                UIAlertView  *alert=[[UIAlertView alloc] initWithTitle:@"Error" message:@"Please logon a device first!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles: nil] ;                [alert show];                       return;    }        if (m_bPTZUD == true)    {                if(!NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, TILT_UP, 1))        {            NSLog(@"stop TILT_UP failed with[%d]", NET_DVR_GetLastError());        }        else        {            NSLog(@"stop TILT_UP succ");        }        [m_ptzUDButton setTitle:@"PTZ(下)" forState:UIControlStateNormal];    }    else    {        if(!NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, TILT_DOWN, 1))        {            NSLog(@"stop TILT_DOWN failed with[%d]", NET_DVR_GetLastError());        }        else        {            NSLog(@"stop TILT_DOWN succ");        }        [m_ptzUDButton setTitle:@"PTZ(上)" forState:UIControlStateNormal];    }        }//ptz button click ================实现上下转向- (void)ptzBtnClickedDown:(id)sender{    NSLog(@"ptzBtnClickedDown");    NSLog(@"点击了上下转向按钮");            if (m_lUserID < 0)    {        NSLog(@"Please logon a device first!");                UIAlertView  *alert=[[UIAlertView alloc] initWithTitle:@"Error" message:@"Please logon a device first!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles: nil] ;                [alert show];                return;    }    if (m_bPTZUD == false)    {        //==============控制摄像头的转向TILT_UP(详情方向参考文档)        if(!NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, TILT_UP, 0))        {                        NSLog(@"start TILT_UP failed with[%d]", NET_DVR_GetLastError());        }        else        {            NSLog(@"start TILT_UP succ");        }        m_bPTZUD = true;    }    else    {        //向下转======控制摄像头的转向TILT_DOWN(详情方向参考文档)        if(!NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, TILT_DOWN, 0))        {            NSLog(@"start TILT_DOWN failed with[%d]", NET_DVR_GetLastError());        }        else        {            NSLog(@"start TILT_DOWN succ");        }        m_bPTZUD = false;    }    }//ptz button click up====================更改左右方向标识-(void)ptzBtnClickedUp:(id)sender{    NSLog(@"ptzBtnClickedUp");    NSLog(@"更改左右方向标识");        if (m_bPTZL == true) {        if(!NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, PAN_LEFT, 1))        {            NSLog(@"stop PAN_LEFT failed with[%d]", NET_DVR_GetLastError());        }        else        {            NSLog(@"stop PAN_LEFT succ");        }        [m_ptzButton setTitle:@"PTZ(右)" forState:UIControlStateNormal];    }    else    {        if(!NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, PAN_RIGHT, 1))        {            NSLog(@"stop PAN_RIGHT failed with[%d]", NET_DVR_GetLastError());        }        else        {            NSLog(@"stop PAN_RIGHT succ");        }        [m_ptzButton setTitle:@"PTZ(左)" forState:UIControlStateNormal];    }}//ptz button click=======================实现左右转向-(void)ptzBtnClicked:(id)sender{        NSLog(@"ptzBtnClicked");        if (m_lUserID < 0)    {        NSLog(@"Please logon a device first!");                UIAlertView  *alert=[[UIAlertView alloc] initWithTitle:@"Error" message:@"Please logon a device first!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles: nil] ;                [alert show];                return;    }    if (m_bPTZL == false)    {        //==============控制摄像头的转向Pan_LEFT(详情方向参考文档)        if(!NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, PAN_LEFT, 0))        {                        NSLog(@"start PAN_LEFT failed with[%d]", NET_DVR_GetLastError());        }        else        {            NSLog(@"start PAN_LEFT succ");        }        m_bPTZL = true;    }    else    {        //向右转======控制摄像头的转向Pan_LEFT(详情方向参考文档)        if(!NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, PAN_RIGHT, 0))        {            NSLog(@"start PAN_RIGHT failed with[%d]", NET_DVR_GetLastError());        }        else        {            NSLog(@"start PAN_RIGHT succ");        }        m_bPTZL = false;    }}//talk button click================交流按钮-(void)talkBtnClicked:(id)sender{    NSLog(@"talkBtnClicked");    #if !TARGET_IPHONE_SIMULATOR    if(!m_bVoiceTalk)    {        if(startVoiceTalk(m_lUserID) >= 0)        {            m_bVoiceTalk = true;        }    }    else    {        stopVoiceTalk();        m_bVoiceTalk = false;    }#endif}// record button click while realplay===============-(void)recordBtnClicked:(id)sender{    NSLog(@"recordBtnClicked");    if (m_bRecord == false)    {        if (m_lRealPlayID < 0) {                        NSLog(@"Please start realplay first!");                        return;        }                NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);        NSString *documentsDirectory = [paths objectAtIndex:0];        char szFileName[256] = {0};        NSString* date;        NSDateFormatter* formatter = [[NSDateFormatter alloc]init];        [formatter setDateFormat:@"YYYY-MM-dd-hh-mm-ss"];        date = [formatter stringFromDate:[NSDate date]];                sprintf(szFileName, "%s/%s.mp4", (char*)documentsDirectory.UTF8String, (char*)date.UTF8String);        if (!NET_DVR_SaveRealData(m_lRealPlayID, szFileName)) {            NSLog(@"NET_DVR_SaveRealData failed with[%d]", NET_DVR_GetLastError());            return;        }        NSLog(@"NET_DVR_SaveRealData succ [%s]", szFileName);                m_bRecord = true;        [m_recordButton setTitle:@"Stop Record" forState:UIControlStateNormal];    }    else    {        NET_DVR_StopSaveRealData(m_lRealPlayID);        m_bRecord = false;        [m_recordButton setTitle:@"Start Record" forState:UIControlStateNormal];    }}// capture button click====================抓取按钮-(void)captureBtnClicked:(id)sender{        int nHeight = 0;    int nWidth = 0;    if (!PlayM4_GetPictureSize(0, &nWidth, &nHeight)){        NSLog(@"PlayM4_GetPictureSize fialed with[%d]", PlayM4_GetLastError(m_nPreviewPort));        return;    }    //2cif -> 4cif    if (nWidth == 704 && (nHeight == 288 || nHeight == 240)) {        nHeight <<= 1;    }        int nSize = 5 * nWidth * nHeight;    char *pBuf = new char[nSize];    memset(pBuf, 0, nSize);    unsigned int  dwRet = 0;    if (!PlayM4_GetBMP(0, (unsigned char*)pBuf, nSize, &dwRet))    {        delete []pBuf;        pBuf = NULL;        NSLog(@"PlayM4_GetBMP failed with[%d]", PlayM4_GetLastError(m_nPreviewPort));        return;    }        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);    NSString *documentsDirectory = [paths objectAtIndex:0];    char szFileName[256] = {0};            NSString* date;    NSDateFormatter* formatter = [[NSDateFormatter alloc]init];    [formatter setDateFormat:@"YYYY-MM-dd hh:mm:ss"];    date = [formatter stringFromDate:[NSDate date]];        sprintf(szFileName, "%s/%s.bmp", (char*)documentsDirectory.UTF8String, (char*)date.UTF8String);            FILE *pFile = NULL;    pFile = fopen(szFileName, "wb+");    fwrite(pBuf, dwRet, 1, pFile);    fclose(pFile);        delete []pBuf;    pBuf = NULL;        NSLog(@"capture bmp succ[%s]", szFileName);                NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];    NSString *patch = [documentPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%s",szFileName]];        NSData *data = [NSData dataWithContentsOfFile:patch];    UIImage *image = [UIImage imageWithData:data];    //imagev.image = image;        NSLog(@"%@",image);        return;}// preview button Click========点击了startPreview按钮-(void) playerBtnClicked:(id)sender{    NSLog(@"点击了startPreview按钮");        //==============如果没有登录直接操作给出提示    if (m_lUserID<0)    {        UIAlertView  *alert=[[UIAlertView alloc] initWithTitle:@"Error" message:@"Please logon a device first!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles: nil] ;                [alert show];    }        if(g_iPreviewChanNum > 1)    {        if(!m_bPreview)        {            int iPreviewID[MAX_VIEW_NUM] = {0};            for(int i = 0; i < MAX_VIEW_NUM; i++)            {                iPreviewID[i] = startPreview(m_lUserID, g_iStartChan, m_multiView[i], i);            }            m_lRealPlayID = iPreviewID[0];            m_bPreview = true;            [m_playButton setTitle:@"停止预览" forState:UIControlStateNormal];        }            }}//config button click=============-(void) getcfgBtnClicked:(id)sender{	NSLog(@"getcfgBtnClicked");        if(m_lUserID == -1)    {        NSLog(@"Please logon a device first!");                UIAlertView  *alert=[[UIAlertView alloc] initWithTitle:@"Error" message:@"Please logon a device first!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles: nil] ;                [alert show];        return;    }       	    NET_DVR_COMPRESSIONCFG_V30 struCompress = {0};    DWORD dwRet = 0;    if (!NET_DVR_GetDVRConfig(m_lUserID, NET_DVR_GET_COMPRESSCFG_V30, g_iStartChan, &struCompress, sizeof(struCompress), &dwRet))    {        NSLog(@"NET_DVR_GET_COMPRESSCFG_V30 failed with[%d]", NET_DVR_GetLastError());    }    else    {        NSLog(@"NET_DVR_GET_COMPRESSCFG_V30 succ");    }    //set substream resolution to cif    struCompress.struNetPara.byResolution = 1;    if (!NET_DVR_SetDVRConfig(m_lUserID, NET_DVR_SET_COMPRESSCFG_V30, g_iStartChan, &struCompress, sizeof(struCompress)))    {        NSLog(@"NET_DVR_SET_COMPRESSCFG_V30 failed with[%d]", NET_DVR_GetLastError());    }    else    {        NSLog(@"NET_DVR_SET_COMPRESSCFG_V30 succ");    }}//start player- (void) startPlayer{	[self performSelectorOnMainThread:@selector(playerPlay) 						   withObject:nil						waitUntilDone:NO];    }//play,the function PlayM4_Play must be called in main thread- (void) playerPlay{    int nRet = 0;    if(m_bPreview)    {        nRet = PlayM4_Play(m_nPreviewPort, m_playView);        PlayM4_PlaySound(m_nPreviewPort);    }    else    {        nRet = PlayM4_Play(m_nPlaybackPort, m_playView);        PlayM4_PlaySound(m_nPlaybackPort);    }       	if (nRet != 1)	{		NSLog(@"PlayM4_Play fail");		[self stopPlay];		return;	}}- (void)previewPlay:(int*)iPlayPort playView:(UIView*)playView{    m_nPreviewPort = *iPlayPort;    int iRet = PlayM4_Play(*iPlayPort, playView);    PlayM4_PlaySound(*iPlayPort);    if (iRet != 1)    {        NSLog(@"PlayM4_Play fail");        [self stopPreviewPlay:nil];        return;    }}- (void)stopPreviewPlay:(int*)iPlayPort{    PlayM4_StopSound();    if (!PlayM4_Stop(*iPlayPort))    {        NSLog(@"PlayM4_Stop failed");    }    if(!PlayM4_CloseStream(*iPlayPort))    {        NSLog(@"PlayM4_CloseStream failed");    }    if (!PlayM4_FreePort(*iPlayPort))    {        NSLog(@"PlayM4_FreePort failed");    }    *iPlayPort = -1;}// playback button click (bytime)========回放的时间-(void) playbackBtnClicked:(id)sender{	NSLog(@"playbackBtnClicked");       if (m_lPlaybackID == -1)       {           if(m_lUserID == -1)           {               NSLog(@"Please login on the device first!");                              UIAlertView  *alert=[[UIAlertView alloc] initWithTitle:@"Error" message:@"Please logon a device first!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles: nil] ;                              [alert show];                              return;           }                                 NET_DVR_TIME struStartTime = {0};           NET_DVR_TIME struEndTime = {0};           struStartTime.dwYear = 2016;           struStartTime.dwMonth = 6;           struStartTime.dwDay = 28;                      struEndTime.dwYear = 2016;           struEndTime.dwMonth = 6;           struEndTime.dwDay = 29;                      m_lPlaybackID = NET_DVR_PlayBackByTime(m_lUserID, g_iStartChan, &struStartTime, &struEndTime, NULL);                      if (m_lPlaybackID == -1)            {               NSLog(@"NET_DVR_PlayBackByTime failed:%d",  NET_DVR_GetLastError());               //创建警示窗口               UIAlertView *alert = [[UIAlertView alloc]                                      initWithTitle:kWarningTitle                                     message:kRealPlayFailMsg                                     delegate:nil                                      cancelButtonTitle:kWarningConfirmButton                                     otherButtonTitles:nil];	               [alert show];                       [self stopPlayback];               return;           }                              if (!NET_DVR_PlayBackControl_V40(m_lPlaybackID, NET_DVR_PLAYSTART, NULL, 0, NULL, NULL))           {               NSLog(@"NET_DVR_PlayBackControl_V40 failed:%d",  NET_DVR_GetLastError());               [self stopPlayback];               return;           }           m_bStopPlayback = false;           [m_playbackButton setTitle:@"停止回放" forState:UIControlStateNormal];       }       else       {           m_bStopPlayback = true;            [self stopPlayback];            [m_playbackButton setTitle:@"开始回放" forState:UIControlStateNormal];       }}/* // playback button click (by Name)-(IBAction) playbackBtnClicked:(id)sender{    NSLog(@"playbackBtnClicked");    if (m_lPlaybackID == -1)    {        if(m_lUserID == -1)        {            NSLog(@"Please login on the device first!");            return;        }                m_lPlaybackID = NET_DVR_PlayBackByName(m_lUserID, "ch0001_00010000147000100", NULL);        if (m_lPlaybackID == -1)        {            NSLog(@"NET_DVR_PlayBackByName failed:%d",  NET_DVR_GetLastError());            UIAlertView *alert = [[UIAlertView alloc]                                  initWithTitle:kWarningTitle                                  message:kRealPlayFailMsg                                  delegate:nil                                  cancelButtonTitle:kWarningConfirmButton                                  otherButtonTitles:nil];            [alert show];            [alert release];                        [self stopPlayback];            return;        }                if (!NET_DVR_SetPlayDataCallBack_V40(m_lPlaybackID, fPlayDataCallBack_V40 , self))        {            NSLog(@"NET_DVR_SetPlayDataCallBack_V40 failed:%d",  NET_DVR_GetLastError());            [self stopPlayback];            return;        }                if (!NET_DVR_PlayBackControl_V40(m_lPlaybackID, NET_DVR_PLAYSTART, NULL, 0, NULL, NULL))        {            NSLog(@"NET_DVR_PlayBackControl_V40 failed:%d",  NET_DVR_GetLastError());            [self stopPlayback];            return;        }        m_bStopPlayback = false;        [m_playbackButton setTitle:@"Stop Playback" forState:UIControlStateNormal];    }    else    {        m_bStopPlayback = true;        [self stopPlayback];        [m_playbackButton setTitle:@"Start Playback" forState:UIControlStateNormal];    }}*/- (bool) loginNormalDevice{    //  Get value    NSString * iP = m_deviceIpField.text;    NSString * port = m_devicePortField.text;    NSString * usrName = m_uerNameField.text;    NSString * password = m_passwordField.text;        DeviceInfo *deviceInfo = [[DeviceInfo alloc] init];    deviceInfo.chDeviceAddr = iP;    deviceInfo.nDevicePort = [port integerValue];    deviceInfo.chLoginName = usrName;    deviceInfo.chPassWord = password;        // device login    NET_DVR_DEVICEINFO_V30 logindeviceInfo = {0};//用户注册设备        // encode type    NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);    m_lUserID = NET_DVR_Login_V30((char*)[deviceInfo.chDeviceAddr UTF8String],                                  deviceInfo.nDevicePort,                                  (char*)[deviceInfo.chLoginName cStringUsingEncoding:enc],                                  (char*)[deviceInfo.chPassWord UTF8String],                                  &logindeviceInfo);        printf("iP:%s\n", (char*)[deviceInfo.chDeviceAddr UTF8String]);    printf("Port:%d\n", deviceInfo.nDevicePort);    printf("UsrName:%s\n", (char*)[deviceInfo.chLoginName cStringUsingEncoding:enc]);    printf("Password:%s\n", (char*)[deviceInfo.chPassWord UTF8String]);        // login on failed        if (m_lUserID == -1)    {        UIAlertView *alert = [[UIAlertView alloc]                              initWithTitle:kWarningTitle                              message:kLoginDeviceFailMsg                              delegate:nil                              cancelButtonTitle:kWarningConfirmButton                              otherButtonTitles:nil];        [alert show];                return false;    }    //模拟通道个数>0    if(logindeviceInfo.byChanNum > 0)    {                g_iStartChan = logindeviceInfo.byStartChan;        g_iPreviewChanNum = logindeviceInfo.byChanNum;            }    //最大数字通道>0    else if(logindeviceInfo.byIPChanNum > 0)    {        //byStartDChan 起始数字通道0表示无效        g_iStartChan = logindeviceInfo.byStartDChan;        g_iPreviewChanNum = logindeviceInfo.byIPChanNum + logindeviceInfo.byHighDChanNum * 256;                            }        return true;}- (bool) loginEZVIZDevice{    NET_DVR_OPEN_EZVIZ_USER_LOGIN_INFO struLoginInfo = {0};    NET_DVR_DEVICEINFO_V30 struDeviceInfo = {0};            sprintf(struLoginInfo.sEzvizServerAddress, "pbdev.ys7.com");    struLoginInfo.wPort = 443;    sprintf(struLoginInfo.sAccessToken, "at.2xv1wfuz4rrymc9h6nxyoxlu8o3wqgr5-1os2z4snl0-0ayy1vi-l9nluxmum");    sprintf(struLoginInfo.sAppID, "com.hik.visualintercom");    sprintf(struLoginInfo.sFeatureCode, "226f102a99ad0e078504d380b9ddf760");    sprintf(struLoginInfo.sUrl, "/api/device/transmission");    sprintf(struLoginInfo.sDeviceID, "520247131");    sprintf(struLoginInfo.sClientType, "0");    sprintf(struLoginInfo.sOsVersion, "5.0.1");    sprintf(struLoginInfo.sNetType, "UNKNOWN");    sprintf(struLoginInfo.sSdkVersion, "v.5.1.5.30");            m_lUserID = NET_DVR_CreateOpenEzvizUser(&struLoginInfo, &struDeviceInfo);    NSLog(@"0000000000000 NET_DVR_CreateEzvizUser[%d] with[%d]", m_lUserID, NET_DVR_GetLastError());            // login on failed    if (m_lUserID == -1)    {        DWORD dwRet = -1;        dwRet = NET_DVR_GetLastError();                UIAlertView *alert = [[UIAlertView alloc]                                initWithTitle:kWarningTitle                                message:kLoginDeviceFailMsg                                delegate:nil                                cancelButtonTitle:kWarningConfirmButton                                otherButtonTitles:nil];        [alert show];                return false;    }    return true;}// login button click======================登录按钮-(void) loginBtnClicked:(id)sender{    NSLog(@"loginBtnClicked,=====点击了登录按钮");        if (m_lUserID == -1)    {        // init        BOOL bRet = NET_DVR_Init();//／初始化SDK        if (!bRet)        {            NSLog(@"NET_DVR_Init failed");        }        NET_DVR_SetExceptionCallBack_V30(0, NULL, g_fExceptionCallBack, NULL);///获取异常信息  g_fExceptionCallBack回调打印        NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];        const char* pDir = [documentPath UTF8String];                NET_DVR_SetLogToFile(3, (char*)pDir, true);//／错误日志写入文件                if([self loginNormalDevice])//        if([self loginEZVIZDevice])        {            //设置按钮标题            [m_loginButton setTitle:@"退出" forState:UIControlStateNormal];                                }    }    else     {        NET_DVR_Logout(m_lUserID);//        NET_DVR_DeleteOpenEzvizUser(m_lUserID);        NET_DVR_Cleanup();/// 清理SDK        m_lUserID = -1;                //==========如果直接点击退出登录就关闭预览并将 停止预览状态  复位        for(int i = 0; i < MAX_VIEW_NUM; i++)        {            stopPreview(i);/// 停止预览        }                m_bPreview = false;        [m_playButton setTitle:@"开始预览" forState:UIControlStateNormal];        //        [m_loginButton setTitle:@"登录" forState:UIControlStateNormal];                    //禁止对摄像头上下左右的操作//        NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, PAN_LEFT, 1);//        NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, PAN_RIGHT, 1);//        NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, TILT_UP, 1);//        NET_DVR_PTZControl_Other(m_lUserID, g_iStartChan, TILT_DOWN, 1);    }}//stop preview=================停止预览视频-(void) stopPlay{	if (m_lRealPlayID != -1)	{		NET_DVR_StopRealPlay(m_lRealPlayID);		m_lRealPlayID = -1;			}	       if(m_nPreviewPort >= 0)       {           if(!PlayM4_StopSound())           {               NSLog(@"PlayM4_StopSound failed");           }           if (!PlayM4_Stop(m_nPreviewPort))           {               NSLog(@"PlayM4_Stop failed");           }           if(!PlayM4_CloseStream(m_nPreviewPort))           {               NSLog(@"PlayM4_CloseStream failed");           }           if (!PlayM4_FreePort(m_nPreviewPort))           {               NSLog(@"PlayM4_FreePort failed");           }             m_nPreviewPort = -1;       }}//stop playback==================停止回放- (void) stopPlayback{    if (m_lPlaybackID != -1)    {            NET_DVR_StopPlayBack(m_lPlaybackID);            m_lPlaybackID = -1;    }        if(m_nPlaybackPort >= 0)    {        if (!PlayM4_Stop(m_nPlaybackPort))         {            NSLog(@"PlayM4_Stop failed");        }        if(!PlayM4_CloseStream(m_nPlaybackPort))        {            NSLog(@"PlayM4_CloseStream failed");        }        if (!PlayM4_FreePort(m_nPlaybackPort))        {            NSLog(@"PlayM4_FreePort failed");        }        m_nPlaybackPort = -1;    }    }// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.- (void)viewDidLoad {    	m_lUserID = -1;	m_lRealPlayID = -1;    m_lPlaybackID = -1;    m_nPreviewPort = -1;    m_nPlaybackPort = -1;    m_bRecord = false;    m_bPTZL = false;            //========对IP 端口  账户 密码进行赋值    m_deviceIpField.text = @"192.168.1.100";    m_devicePortField.text = @"8000";    m_uerNameField.text = @"admin";    m_passwordField.text = @"1234abcd";        //======取消用户交互	m_deviceIpField.userInteractionEnabled=NO;    m_devicePortField.userInteractionEnabled=NO;    m_uerNameField.userInteractionEnabled=NO;    m_passwordField.userInteractionEnabled=NO;            //====视频区域的大小    int nWidth = m_playView.frame.size.width/2  ;    int nHeight = m_playView.frame.size.height/2 ;        //=====创建视频画面    for(int i = 0; i < MAX_VIEW_NUM; i++)    {              //=====每行显示的个数        m_multiView[i] = [[UIView alloc] initWithFrame:CGRectMake((i%(MAX_VIEW_NUM/2)) * nWidth, (i/(MAX_VIEW_NUM/2)) * nHeight, (nWidth - 1), (nHeight - 1))];                                //====设置每个视频格的背景颜色        m_multiView[i].backgroundColor = [UIColor greenColor];        m_multiView[i].layer.borderWidth=1;        m_multiView[i].tag=i;        //====加载视频网格       [m_playView addSubview:m_multiView[i]];                                          //================创建点击手势        UITapGestureRecognizer  *tap=[[UITapGestureRecognizer alloc] init];        tap.numberOfTapsRequired=1;        tap.numberOfTouchesRequired=1;        [m_multiView[i] addGestureRecognizer:tap];        [tap addTarget:self action:@selector(EveryClicked:)];                 }        	// hide keybord	[[NSNotificationCenter defaultCenter] addObserver:self                                                          											 selector:@selector(keyboardWillHide:)                                                                  												 name:UIKeyboardWillHideNotification											   object:nil];    g_pController = self;    	[super viewDidLoad];}//=============点击手势响应方法-(void)EveryClicked:(UITapGestureRecognizer *)sender{            if (m_lUserID<0)    {        UIAlertView  *alert=[[UIAlertView alloc] initWithTitle:@"Error" message:@"Please logon a device first!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles: nil] ;                [alert show];                NSLog(@"请先登录");            }    else    {                NSLog(@"=================响应了点击手势的方法");        //=========================获取相应的监控区域        UITapGestureRecognizer *tap = (UITapGestureRecognizer *)sender;        NSInteger tag = tap.view.tag;        switch (tag)        {                                        case 0:            {                NSLog(@"%ld",(long)tag);            //                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{//                    //                //                // [sender.view.layer addAnimation:[self opacityForever_Animation:0.5] forKey:nil];////                });                                 g_iStartChan=g_iStartChan+0;                                                break;           }                                          case 1:            {                NSLog(@"%ld",(long)tag);           //     sender.view.layer.borderColor=[UIColor redColor].CGColor;                                g_iStartChan=g_iStartChan+1;                break;            }            case 2:            {                NSLog(@"%ld",(long)tag);                            //    sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+2;                break;            }            case 3:            {                NSLog(@"%ld",(long)tag);              // sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+3;                                break;            }            case 4:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+4;                break;            }            case 5:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+5;                break;            }            case 6:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+6;                break;            }            case 7:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+7;                break;            }            case 8:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+8;                break;            }            case 9:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+9;                break;            }            case 10:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+10;                break;            }            case 11:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+11;                break;            }            case 12:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+12;                break;            }            case 13:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+13;                break;            }            case 14:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+14;                break;            }            case 15:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+15;                break;            }            case 16:            {                NSLog(@"%ld",(long)tag);//                sender.view.layer.borderColor=[UIColor redColor].CGColor;                g_iStartChan=g_iStartChan+16;                break;            }                            default:                break;                                        }                            }            }- (void)viewDidUnload {    	if (m_lRealPlayID != -1)	{		NET_DVR_StopRealPlay(m_lRealPlayID);		m_lRealPlayID = -1;	}           if(m_lPlaybackID != -1)       {           NET_DVR_StopPlayBack(m_lPlaybackID);           m_lPlaybackID = -1;       }           if(m_lUserID != -1)       {           NET_DVR_Logout(m_lUserID);           NET_DVR_Cleanup();           m_lUserID = -1;       }}@end